<?xml version="1.0" encoding="UTF-8"?>
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">

	<!--Id will be a keyword for sure if it is fully caitalized-->
	<!--Id can be in pascal naming also and i will mention those as "keyword" whenever possible-->
	
	
	<?if $(var.Platform)=x64?>
	<?define ProductCode = {F1C9C720-03F0-47A8-B913-7C5898856CD3}?>
	<?else?>
	<?define ProductCode = {3EACF020-3B72-42C5-825B-73E6C2617DC7}?>
	<?endif?>
	
	<!-- ProductCode change for new versions and UpgradeCode remains same. -->
	<?define UpgradeCode = {6C74CF9B-C848-4806-8198-021EB5EAE9A9}?> 
	
	<?define BuildVersion = 2.0.4.0?>
	<?define BuildVersion_forUpgradeBlock = 2.0.4?>
	
	<Product Id="$(var.ProductCode)" 
			 Name="!(loc.ProductName_$(var.Platform))" 
			 Language="!(loc.Language)" 
			 Version="$(var.BuildVersion)" 
			 Manufacturer="!(loc.Company)" 
			 UpgradeCode="$(var.UpgradeCode)">
		<!--Keep the same UpgradeCode GUID as long as you want the products to be upgraded by the 
		same upgrade version. In the usual case, this would mean one code for all 1.x versions, 
		another one for the 2.x versions, etc-->

		<!--Only later versions will have package Id, 
		first or very first in major release don't require package Id -->
		<Package Id="*" 
				 InstallerVersion="200" 
				 Compressed="yes" 
				 InstallScope="perMachine"
				 Platform="$(var.Platform)"
				 Manufacturer="!(loc.Company)" 
				 Description="!(loc.Description)"
				 Keywords="!(loc.Keywords)"
				 Comments="!(loc.Comments)"
				 Languages="!(loc.Language)"/>

		<MajorUpgrade DowngradeErrorMessage="!(loc.DowngradeErrorMessage)" />

		<!-- MediaTemplate is: when we package this installer to the msi file, when we start adding 
		our product file(Actutal code and dependancies) to the installer, they go into a CAB file(it
		is like a zip file) and this MediaTemplate describes, what name to give that CAB file, how to 
		packge it, whether it gets embedded in msi file or not.
		make sure to embed the CAB file(EmbedCab="yes") otherwise we will end up with a msi file and 
		a seperate cab file which we will have toship along with msi-->
		<MediaTemplate 
			EmbedCab="yes"/>

		
		<!--Adding Product Icon (shows in Add/Remove programs)-->
		<Icon Id="icon.ico" SourceFile="$(var.ConsoleApp1.ProjectDir)\imanageIcon.ico"/>
		<Property Id="ARPPRODUCTICON">icon.ico</Property>

		<!--Support website (shows in Add/Remove programs)-->
		<Property Id="ARPURLINFOABOUT">https://imanage.com/</Property>

		<!--creates basic UI for installer-->
		<UIRef Id="WixUI_Minimal"/> <!--keyword-->

		<!-- Change the installer UI background images -->
		<WixVariable Id="WixUILicenseRtf" Value="$(var.ProjectDir)\Assets\License.rtf" />
		<WixVariable Id="WixUIDialogBmp" Value="$(var.ProjectDir)\Assets\Background.bmp" />
		<WixVariable Id="WixUIBannerBmp" Value="$(var.ProjectDir)\Assets\Banner.bmp" />
		<!--all three of above WixVariable Ids are keyword-->

		<!-- Feature contains everything from the files that you install, the start menu links if 
		you make those,  program files foldr, any other folder that you make or install, setting up
		files, registry entry, shortcuts, etc. -->
		<Feature Id="ProductFeature" Title="ConsoleApp1" Level="1"> <!--keyword-->
			<ComponentGroupRef Id="PublishComponents" />
			<ComponentGroupRef Id="StartMenuComponent" />
		</Feature>
		

		

		<!--he Id attribute of the Upgrade tag refers back to the UpgradeCode GUID of the original 
		installation package. The internal UpgradeVersion tag describes the details of the versions 
		to be updated. OnlyDetect tells the installer not to remove the previous product 
		(remember, we're doing a minor upgrade, we keep the old version of the product in place 
		but replace one file. If we were doing a major upgrade, we would probably remove 1.0.0 
		and install 1.1.0 instead).-->
		
		<Upgrade Id='$(var.UpgradeCode)'>
			<UpgradeVersion OnlyDetect='yes' Property='SELFFOUND'
				Minimum='$(var.BuildVersion_forUpgradeBlock)' IncludeMinimum='yes'
				Maximum='$(var.BuildVersion_forUpgradeBlock)' IncludeMaximum='yes' />
			<UpgradeVersion OnlyDetect='yes' Property='NEWERFOUND'
				Minimum='$(var.BuildVersion_forUpgradeBlock)' IncludeMinimum='no' />
		</Upgrade>
		
		
		<!--Using an Upgrade tag in our source file triggers the inclusion of a new standard action, 
		FindRelatedProducts. It is scheduled to run before AppSearch, if any. If necessary, we can 
		re-schedule it inside the InstallExecuteSequence tag.
		After the check has run, we can take the appropriate actions based on the existence and 
		value of the properties involved:-->

		
		<CustomAction Id='AlreadyUpdated' Error='Console App has already been updated to $(var.BuildVersion) or newer.' />
		<CustomAction Id='NoDowngrade' Error='A later version of [ProductName] is already installed.' />

		<InstallExecuteSequence>
			<Custom Action='AlreadyUpdated' After='FindRelatedProducts'>SELFFOUND</Custom>
			<Custom Action='NoDowngrade' After='FindRelatedProducts'>NEWERFOUND</Custom>
		</InstallExecuteSequence>
		
		
	
	
		<!--As you can see, this upgrade version will behave properly in both directions. It will 
		replace the earlier package but it will also handle the case where the program might be 
		upgraded even further in the future (eg, 1.0.2 and later). It will not downgrade a 
		possible later version back to 1.0.1. To be absolutely correct and foolproof, we have to 
		plan that early. Even the very first installer we ship should already have this safety 
		lock built in: -->
	
		
		<!--
		<Upgrade Id='$(var.UpgradeCode)'>
			<UpgradeVersion OnlyDetect='yes' Property='NEWERFOUND' 
				Minimum='2.0.0' IncludeMinimum='no' />
			</Upgrade>

		<CustomAction Id='NoDowngrade' Error='A later version of [ProductName] is already installed.' />

		<InstallExecuteSequence>
			<Custom Action='NoDowngrade' After='FindRelatedProducts'>NEWERFOUND</Custom>
		</InstallExecuteSequence>
		-->
		
	</Product>
	
</Wix>
